<div>
  <p style="text-align: center; margin-bottom: 2rem;">
    Welcome to Bob's Game Store! We're selling the Nintendo Switch 2 and demonstrating different Temporal workflow patterns.
  </p>
  
  <div class="carousel-container">
    <button class="carousel-nav prev" id="prevBtn" onclick="prevSlide()">←</button>
    <button class="carousel-nav next" id="nextBtn" onclick="nextSlide()">→</button>
    
    <div class="carousel-slides" id="carousel-slides">
      <% @demos.each_with_index do |demo, index| %>
        <div class="carousel-slide">
          <div class="demo-card">
            <h2 style="text-align: center; margin-bottom: 1rem; color: #1a1a1a;"><%= demo[:name] %></h2>
            
            <div style="display: flex; gap: 2rem; margin: 1.5rem 0;">
              <div style="flex: 1;">
                <h3 style="text-align: center; margin-bottom: 1rem;">Workflow Diagram</h3>
                <div class="mermaid-container">
                  <div class="mermaid">
                    <%= demo[:mermaid].strip %>
                  </div>
                </div>
              </div>
              
              <div style="flex: 2;">
                <h3 style="text-align: center; margin-bottom: 1rem;">Ruby Code</h3>
                <div class="code-tabs-container">
                  <div class="code-tabs">
                    <% demo[:code_files].each_with_index do |file, file_index| %>
                      <button class="code-tab <%= 'active' if file_index == 0 %>" 
                              onclick="showCodeTab(this, 'code-content-<%= index %>-<%= file_index %>')">
                        <%= file[:name] %>
                      </button>
                    <% end %>
                  </div>
                  <div class="code-container">
                    <% demo[:code_files].each_with_index do |file, file_index| %>
                      <div id="code-content-<%= index %>-<%= file_index %>" 
                           class="code-content <%= 'active' if file_index == 0 %>">
                        <pre><code class="language-ruby"><%= file[:content] %></code></pre>
                      </div>
                    <% end %>
                  </div>
                </div>
              </div>
            </div>
            
            <form action="<%= demo[:path] %>" method="post" style="max-width: 400px; margin: 2rem auto 0;">
              <%= token_tag %>
              
              <% if demo[:name].include?("Pre-order") %>
                <div>
                  <label for="release_minutes">Release in minutes (demo):</label>
                  <input type="number" name="release_minutes" value="2" min="1" max="10">
                </div>
              <% end %>
              
              <div style="text-align: center;">
                <button type="submit">Try <%= demo[:name] %></button>
              </div>
            </form>
          </div>
        </div>
      <% end %>
    </div>
  </div>
  
  <div class="carousel-indicators">
    <% @demos.each_with_index do |demo, index| %>
      <span class="carousel-dot <%= 'active' if index == 0 %>" onclick="goToSlide(<%= index %>)"></span>
    <% end %>
  </div>
  
  <hr style="margin-top: 3rem;">
  
  <details>
    <summary>API Information</summary>
    <div class="monospace">
      <p><strong>JSON API Endpoints:</strong></p>
      <ul>
        <li>GET /bobs_game_store.json - API info</li>
        <li>POST /bobs_game_store/simple_purchase</li>
        <li>POST /bobs_game_store/payment_retry</li>
        <li>POST /bobs_game_store/preorder</li>
        <li>GET /bobs_game_store/workflow/:id - Check status</li>
      </ul>
      
      <p><strong>Example curl:</strong></p>
      <code>curl -X POST -d "customer_email=test@example.com&product=Nintendo Switch 2&amount=399.99" http://localhost:3001/bobs_game_store/simple_purchase</code>
    </div>
  </details>
</div>

<script>
  // Carousel functionality - Global variables and functions
  let currentSlide = 0;
  const totalSlides = <%= @demos.length %>;
  let isTransitioning = false;

  function updateCarousel() {
    console.log('updateCarousel called - currentSlide:', currentSlide, 'totalSlides:', totalSlides, 'isTransitioning:', isTransitioning);
    
    const slides = document.getElementById('carousel-slides');
    if (!slides) {
      console.log('updateCarousel error - slides element not found');
      return;
    }
    
    const offset = -currentSlide * 100;
    console.log('Setting transform offset to:', offset + '%');
    slides.style.transform = `translateX(${offset}%)`;
    
    // Update indicators
    document.querySelectorAll('.carousel-dot').forEach((dot, index) => {
      dot.classList.toggle('active', index === currentSlide);
    });
    
    // Update button visibility
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    if (prevBtn) {
      prevBtn.style.display = currentSlide === 0 ? 'none' : 'block';
    }
    
    if (nextBtn) {
      nextBtn.style.display = currentSlide === totalSlides - 1 ? 'none' : 'block';
    }
    
    console.log('Updated carousel to slide:', currentSlide, 'prev visible:', currentSlide !== 0, 'next visible:', currentSlide !== totalSlides - 1);
    
    // Re-highlight code syntax for the current slide
    setTimeout(() => {
      if (typeof Prism !== 'undefined') {
        Prism.highlightAll();
      }
    }, 350);
  }

  function nextSlide() {
    console.log('nextSlide called - currentSlide before:', currentSlide, 'isTransitioning:', isTransitioning);
    
    if (isTransitioning) {
      console.log('nextSlide blocked - isTransitioning is true');
      return;
    }
    
    if (currentSlide >= totalSlides - 1) {
      console.log('nextSlide blocked - already at last slide');
      return;
    }
    
    isTransitioning = true;
    currentSlide++;
    
    console.log('nextSlide - currentSlide after:', currentSlide);
    updateCarousel();
    
    setTimeout(() => {
      isTransitioning = false;
      console.log('nextSlide - isTransitioning set to false');
    }, 300);
  }

  function prevSlide() {
    console.log('prevSlide called - currentSlide before:', currentSlide, 'isTransitioning:', isTransitioning);
    
    if (isTransitioning) {
      console.log('prevSlide blocked - isTransitioning is true');
      return;
    }
    
    if (currentSlide <= 0) {
      console.log('prevSlide blocked - already at first slide');
      return;
    }
    
    isTransitioning = true;
    currentSlide--;
    
    console.log('prevSlide - currentSlide after:', currentSlide);
    updateCarousel();
    
    setTimeout(() => {
      isTransitioning = false;
      console.log('prevSlide - isTransitioning set to false');
    }, 300);
  }

  function goToSlide(index) {
    if (isTransitioning || index < 0 || index >= totalSlides) return;
    isTransitioning = true;
    
    currentSlide = index;
    updateCarousel();
    
    setTimeout(() => {
      isTransitioning = false;
    }, 300);
  }

  function showCodeTab(clickedTab, contentId) {
    console.log('showCodeTab called with:', contentId);
    
    // Find the parent tabs container
    const tabsContainer = clickedTab.closest('.code-tabs-container');
    
    // Hide all code content in this container
    tabsContainer.querySelectorAll('.code-content').forEach(content => {
      content.classList.remove('active');
    });
    
    // Remove active class from all tabs in this container
    tabsContainer.querySelectorAll('.code-tab').forEach(tab => {
      tab.classList.remove('active');
    });
    
    // Show the selected content and activate the clicked tab
    document.getElementById(contentId).classList.add('active');
    clickedTab.classList.add('active');
    
    // Re-highlight syntax for the newly shown code
    setTimeout(() => {
      if (typeof Prism !== 'undefined') {
        Prism.highlightAll();
      }
    }, 10);
  }

  // Make sure the function is available globally
  console.log('showCodeTab function defined:', typeof showCodeTab);

document.addEventListener('DOMContentLoaded', function() {
  // Initialize Mermaid
  mermaid.initialize({ 
    startOnLoad: true,
    theme: 'default',
    flowchart: {
      htmlLabels: true,
      curve: 'basis'
    }
  });
  
  // Initialize Prism.js for syntax highlighting
  if (typeof Prism !== 'undefined') {
    Prism.highlightAll();
  }

  // Initialize button visibility
  updateCarousel();

  // Keyboard navigation
  document.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft') {
      prevSlide();
    } else if (e.key === 'ArrowRight') {
      nextSlide();
    }
  });

  // Auto-advance every 30 seconds (optional)
  // setInterval(nextSlide, 30000);
});
</script>